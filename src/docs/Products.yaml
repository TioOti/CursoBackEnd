paths:
  /api/products:
    get:
      summary: Retrieve all Products.
      tags:
        - Products
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Query"
      responses:
        "200":
          description: Products were successfully retrieved.
        "404":
          description: Products were not found.
        "500":        
          description: Unhandled Error. Internal Server Error.
    post:
      summary: Create a Product.
      tags:
        - Products
      security:
        - jwtTokenAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateProductRequest"
      responses:
        "201":
          description: Product was successfully created.
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. Unauthorized access to the resource.
        "500":        
          description: Unhandled Error. Internal Server Error.

  /api/products/{pid}:
    get:
      summary: Retrieve a Product by Id.
      tags:
        - Products
      parameters:
        - $ref: "#/components/parameters/ProductId"
      responses:
        "200":
          description: Product was successfully retrieved.
        "404":
          description: The product was not found.
        "500":        
          description: Unhandled Error. Internal Server Error.
    put:
      summary: Update a Product.
      tags:
        - Products
      security:
        - jwtTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ProductId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProductRequest"
      responses:
        "200":
          description: Product was successfully updated.
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. Unauthorized access to the resource.
        "404":
          description: The product was not found.
        "500":        
          description: Unhandled Error. Internal Server Error.
    delete:
      summary: Delete a Product.
      tags:
        - Products
      security:
        - jwtTokenAuth: []
      parameters:
        - $ref: "#/components/parameters/ProductId"
      responses:
        "204":
          description: Product was successfully deleted.
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. Unauthorized access to the resource.
        "404":
          description: The product was not found.
        "500":        
          description: Unhandled Error. Internal Server Error.

components:
  parameters:
    ProductId:
        in: path
        name: pid
        required: true
        description: Product Id.
        schema:
          type: string
        example: 63d310fa8c819660b6d406fa

    Limit:
      in: query
      name: limit
      description: Results to display Limit.
      schema:
        type: number
        default: 10
        example: 10
    Page:
      in: query
      name: page
      description: Page number to display.
      schema:
        type: number
        default: 1
        example: 1
    Sort:
      in: query
      name: sort
      description: Price sort order.
      schema:
        type: string
        enum: ["asc", "desc"]
        example: desc
    Query:
      in: query
      name: query
      description: Field to filter By.
      schema:
        type: string
        enum: ["category", "status"]
        example: category

  schemas:
    Product:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/Title"
        description:
          $ref: "#/components/schemas/Description"
        price:
          $ref: "#/components/schemas/Price"
        status:
          $ref: "#/components/schemas/Status"
        category:
          $ref: "#/components/schemas/Category"
        thumbnails:
          $ref: "#/components/schemas/Thumbnails"
        code:
          $ref: "#/components/schemas/Code"
        stock:
          $ref: "#/components/schemas/Stock"
      required:
        - title
        - description
        - price
        - category
        - code
        - stock

    Title:
      type: string
      description: The Product Title/Name.
      example: This is a test Product Title.
    Description:
      type: string
      description: The Product Description.
      example: This is a test Product description.
    Price:
      type: integer
      description: The Product Price.
      example: 250.
    Status:
      type: boolean
      description: The Product Status.
      default: true
      example: true
    Category:
      type: string
      description: The Product Category.
      example: Category 1.
    Thumbnails:
      type: array
      description: The Product Thumnails.
      items:
        $ref: "#/components/schemas/ImgURL"
    ImgURL:
      type: string
      description: Image URL for Thumnails.
      example: "/img/imagen1"
    Code:
      type: string
      description: The Product Unique Identifier Code.
      example: abc123
    Stock:
      type: integer
      description: The Product available Stock.
      example: 50.

    UpdateProduct:
      type: object
      properties:
        stock:
          $ref: "#/components/schemas/Stock"
      required:
        - stock

  requestBodies:
    CreateProductRequest:
      description: Product Creation Request Body.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
    UpdateProductRequest:
      description: Product Update Request Body.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateProduct"

  securitySchemes:
    jwtTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 